{"version":3,"sources":["scripts/months.js","scripts/notes.js","scripts/archivedNotes.js","scripts/helpers.js","scripts/main.js"],"names":["months","notes","archivedNotes","name","category","created","content","dates","createButton","text","className","clickHandler","button","document","createElement","textContent","classList","add","addEventListener","table","querySelectorAll","summaryTable","addRowButton","querySelector","popupBox","title","closeForm","submitForm","nameInput","categorySelect","contentInput","isUpdate","updateId","dateRegex","addRowToTable","rowData","index","newRow","insertRow","Object","keys","forEach","key","insertCell","appendChild","handleUpdateButtonClick","rowIndex","handleArchiveButtonClick","handleDeleteButtonClick","rowElement","noteId","click","value","innerText","remove","push","splice","createSummaryTable","addErrorClass","error","trim","selectedIndex","clearErrorClasses","actives","archived","categories","tbody","getElementsByTagName","innerHTML","activeCountCell","activeCount","filter","note","length","archivedCountCell","archivedCount","initializeTables","event","preventDefault","noteName","noteContent","noteCategory","options","Error","dateObject","Date","year","getFullYear","month","getMonth","day","getDate","match","noteInfo"],"mappings":"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","file":"main.2cac3d68.js","sourceRoot":"..\\src","sourcesContent":["export const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n","export const notes = [\n  {\n    \"name\": \"First note example\",\n    \"category\": \"Task\",\n    \"created\": \"June 11, 2023\",\n    \"content\": \"I am gonna have a dentist appointment on the 15/06/2023, I moved it from 17/06/2023\",\n    \"dates\": \"15/06/2021,17/06/2023\",\n  },\n  {\n    \"name\": \"Second note example\",\n    \"category\": \"Random Thought\",\n    \"created\": \"June 16, 2023\",\n    \"content\": \"Description for second note\",\n    \"dates\": \"\",\n  },\n  {\n    \"name\": \"Third note example\",\n    \"category\": \"Idea\",\n    \"created\": \"June 23, 2023\",\n    \"content\": \"Description for third note\",\n    \"dates\": \"\",\n  },\n  {\n    \"name\": \"Fourth note example\",\n    \"category\": \"Random Thought\",\n    \"created\": \"June 29, 2023\",\n    \"content\": \"Description for fourth note\",\n    \"dates\": \"\",\n  },\n  {\n    \"name\": \"Fifth note example\",\n    \"category\": \"Task\",\n    \"created\": \"July 3, 2023\",\n    \"content\": \"Concert 05/07/2023\",\n    \"dates\": \"05/07/2023\",\n  },\n  {\n    \"name\": \"Sixth note example\",\n    \"category\": \"Random Thought\",\n    \"created\": \"July 30, 2023\",\n    \"content\": \"Description for sixth note\",\n    \"dates\": \"\",\n  },\n  {\n    \"name\": \"Seventh note example\",\n    \"category\": \"Random Thought\",\n    \"created\": \"July 31, 2023\",\n    \"content\": \"Description for seventh note\",\n    \"dates\": \"\",\n  }\n];\n","export const archivedNotes = [\n  {\n    name: 'Archived note example',\n    category: 'Task',\n    created: 'July 31, 2023',\n    content: 'Description for archived note',\n    dates: '',\n  },\n];\n","export function createButton(text, className, clickHandler) {\n  const button = document.createElement('button');\n\n  button.textContent = text;\n  button.classList.add('button', className);\n  button.addEventListener('click', clickHandler);\n\n  return button;\n}\n","'use strict';\nimport 'bulma';\n\nimport { months } from './months';\nimport { notes } from './notes';\nimport { archivedNotes } from './archivedNotes';\nimport { createButton } from './helpers';\n\nconst table = document.querySelectorAll('.table')[0];\nconst summaryTable = document.querySelectorAll('.table')[1];\nconst addRowButton = document.querySelector('.add-row-button');\nconst popupBox = document.querySelector('.popup-box');\nconst title = popupBox.querySelector('.title');\nconst closeForm = popupBox.querySelector('.close-form');\nconst submitForm = popupBox.querySelector('.submit-form');\nconst nameInput = document.querySelector('input');\nconst categorySelect = document.querySelector('select');\nconst contentInput = document.querySelector('textarea');\n\nlet isUpdate = false;\nlet updateId = 0;\n\nconst dateRegex = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/g;\n\nfunction addRowToTable(rowData, index) {\n  const newRow = table.insertRow(index);\n\n  Object.keys(rowData).forEach((key) => {\n    const cell = newRow.insertCell();\n\n    cell.textContent = rowData[key];\n  });\n\n  const updateCell = newRow.insertCell();\n\n  updateCell.appendChild(createButton('Update', 'update-btn', () => {\n    handleUpdateButtonClick(newRow, newRow.rowIndex - 1);\n  }));\n\n  const archiveCell = newRow.insertCell();\n\n  archiveCell.appendChild(createButton('Archive', 'archive-btn', () => {\n    handleArchiveButtonClick(newRow, newRow.rowIndex - 1);\n  }));\n\n  const deleteCell = newRow.insertCell();\n\n  deleteCell.appendChild(createButton('Delete', 'delete-btn', () => {\n    handleDeleteButtonClick(newRow, newRow.rowIndex - 1);\n  }));\n}\n\nfunction handleUpdateButtonClick(rowElement, noteId) {\n  isUpdate = true;\n  updateId = noteId;\n  addRowButton.click();\n  nameInput.value = notes[noteId].name;\n  categorySelect.value = notes[noteId].category;\n  contentInput.value = notes[noteId].content;\n  submitForm.innerText = 'Update Note';\n  title.innerText = 'Update Note';\n  rowElement.remove();\n}\n\nfunction handleArchiveButtonClick(rowElement, noteId) {\n  archivedNotes.push(...notes.splice(noteId, 1));\n  rowElement.remove();\n  createSummaryTable(notes, archivedNotes);\n}\n\nfunction handleDeleteButtonClick(rowElement, noteId) {\n  notes.splice(noteId, 1);\n  rowElement.remove();\n  createSummaryTable(notes, archivedNotes);\n}\n\naddRowButton.addEventListener('click', () => {\n  popupBox.classList.add('is-showed');\n});\n\ncloseForm.addEventListener('click', () => {\n  isUpdate = false;\n  popupBox.classList.remove('is-showed');\n  submitForm.innerText = 'Add Note';\n  title.innerText = 'Add new Note';\n  nameInput.value = '';\n  categorySelect.selectedIndex = 0;\n  contentInput.value = '';\n});\n\nsubmitForm.addEventListener('click', (event) => {\n  event.preventDefault();\n\n  const noteName = nameInput.value.trim();\n  const noteContent = contentInput.value.trim();\n  const noteCategory = categorySelect\n    .options[categorySelect.selectedIndex].value;\n\n  try {\n    if (noteName === '') {\n      throw new Error('Name is required.');\n    }\n\n    if (categorySelect.selectedIndex === 0) {\n      throw new Error('Category must be selected.');\n    }\n\n    if (noteContent === '') {\n      throw new Error('Content is required.');\n    }\n\n    if (noteName && noteContent && noteCategory) {\n      clearErrorClasses();\n\n      const dateObject = new Date();\n      const year = dateObject.getFullYear();\n      const month = months[dateObject.getMonth()];\n      const day = dateObject.getDate();\n      const dates = noteContent.match(dateRegex);\n\n      const noteInfo = {\n        name: noteName,\n        category: noteCategory,\n        created: `${month} ${day}, ${year}`,\n        content: noteContent,\n        dates: dates || '',\n      };\n\n      if (!isUpdate) {\n        notes.push(noteInfo);\n        addRowToTable(noteInfo, -1);\n      } else {\n        isUpdate = false;\n        notes[updateId] = noteInfo;\n        addRowToTable(noteInfo, updateId + 1);\n      }\n\n      createSummaryTable(notes, archivedNotes);\n      closeForm.click();\n    }\n  } catch (error) {\n    addErrorClass();\n  }\n});\n\nfunction addErrorClass(error) {\n  if (!nameInput.value.trim()) {\n    nameInput.classList.add('is-danger');\n  }\n\n  if (categorySelect.selectedIndex === 0) {\n    document.querySelector('.select').classList.add('is-danger');\n  }\n\n  if (!contentInput.value.trim()) {\n    contentInput.classList.add('is-danger');\n  }\n}\n\nfunction clearErrorClasses() {\n  nameInput.classList.remove('is-danger');\n  document.querySelector('.select').classList.remove('is-danger');\n  contentInput.classList.remove('is-danger');\n}\n\nfunction createSummaryTable(actives, archived) {\n  const categories = ['Task', 'Random Thought', 'Idea'];\n  const tbody = summaryTable.getElementsByTagName('tbody')[0];\n\n  tbody.innerHTML = '';\n\n  categories.forEach((category) => {\n    const newRow = tbody.insertRow();\n    const categoryCell = newRow.insertCell();\n\n    categoryCell.textContent = category;\n\n    const activeCountCell = newRow.insertCell();\n    const activeCount = actives\n      .filter((note) => note.category === category).length;\n\n    activeCountCell.textContent = activeCount;\n\n    const archivedCountCell = newRow.insertCell();\n    const archivedCount = archived\n      .filter((note) => note.category === category).length;\n\n    archivedCountCell.textContent = archivedCount;\n  });\n}\n\nfunction initializeTables() {\n  notes.forEach((rowData) => {\n    addRowToTable(rowData);\n  });\n  createSummaryTable(notes, archivedNotes);\n}\n\ninitializeTables();\n"]}